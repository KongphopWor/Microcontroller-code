#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#define FS_NO_GLOBALS
#include <FS.h>
#include "SPIFFS.h"
#include <SPI.h>
#include <JPEGDecoder.h>
#include <TFT_eSPI.h>
#include <Adafruit_GFX.h>
#include <TLC5615.h>
#include "RTClib.h"
#define WIFI_SSID "Your WiFi SSID"
#define WIFI_PASSWORD "Your WiFi Password"
#define API_KEY "Firebase API Key"
#define FIREBASE_PROJECT_ID "Firebase Project ID"
#define USER_EMAIL "Firebase User Email"
#define USER_PASSWORD "Firebase User Password"
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
String documentPathSweep = "Sweep_Mode/"; 
String documentPathScan = "Scanning_Mode/"; 

//Set ID for scanning mode
String randomIDforScan;
String randomIDforSweep;
String documentPathScanwithID;
String documentPathSweepwithID;
String Sweep_Result_ID;
String Sweep_Result;
FirebaseJson contentResultSweep;
int numScan = 0,numSweep = 0;



TLC5615 dacLLD(12);  
TLC5615 dacULD(14);
const byte SQWinput = 26;
const byte LOGICinput = 27;
unsigned long lastButtonPressTime = 0;
const unsigned long debounceDelay = 150;
volatile int TIME, Delay_time = 4, Display = 0, LLD_INT, ULD_INT, WIN_INT,STEP_INT ,start_status = 0, FINISH = 0, width;
int page = 1, cursor_page1 = 1, cursor_page2, mode, button, cursor_enter, SetTime_sweep = 0, SetTime_scan = 0, POSITION = 0, SetTime, 
digit1_WIN = 0, digit2_WIN = 0, digit3_WIN = 0, digit1_ULD = 0, digit2_ULD = 0, digit3_ULD = 0, digit1_LLD = 0, digit2_LLD = 0, digit3_LLD = 0,
digit1_STEP = 0, digit2_STEP = 0, digit3_STEP = 0, voltage = 0;
float ULD = 0.00, LLD = 0.00, WIN = 0.00, STEP = 0.00, ULD_loop, LLD_loop, WIN_loop, STEP_loop, ULD_DIS, LLD_DIS, ULD_DIS_LAST;
volatile long COUNT, NETCOUNT, NETCOUNT_LAST;
unsigned long loadingMillis;
bool change = false, FLAG1, FLAG2, FLAG3, FLAG4 = false;
TFT_eSPI tft = TFT_eSPI();
RTC_DS3231 rtc;
void IRAM_ATTR TimeInterrupt() {
  TIME++; 
  FLAG2 = true;
}
void IRAM_ATTR LogicInterrupt() {
  COUNT++; 
}
int AnalogToDigital(float AnalogValue){
  int DigitalValue = int((AnalogValue / 10.0) * 1023.0);
  return DigitalValue;
}
void loop_T0(void * parameter) {
  for (;;) {
  if(start_status == 1){
   if(FLAG4 == true){
    FLAG1 = true, FLAG2 = false, FLAG3 = true, FLAG4 = false;
   }
   if (FLAG1){
    TIME = 0, FLAG1 = false;
    switch(mode) {
    case 1:
      LLD_INT += STEP_INT;
      if(FLAG3){
        Serial.println("Sweep mode");
        LLD_loop = 0, FLAG3 = false;
        WIN_INT = static_cast<int>(WIN_loop*100);
        LLD_INT = static_cast<int>(LLD_loop*100);
        STEP_INT = static_cast<int>(STEP_loop*100);
      }
      ULD_INT = LLD_INT + WIN_INT;
      ULD_loop = static_cast<float>(ULD_INT)/100;
      LLD_loop = static_cast<float>(LLD_INT)/100;
      break;
    case 2:
      Serial.println("Scanning mode");
      WIN_loop = ULD_loop - LLD_loop;
      break;
    }
    dacLLD.analogWrite(AnalogToDigital(LLD_loop));  
    dacULD.analogWrite(AnalogToDigital(WIN_loop)); //Change to WIN_LOOP
  }
  else if(FLAG2){
    if(TIME == Delay_time){
      COUNT = 0;
    }
    else if (SetTime == TIME - Delay_time){
    NETCOUNT = COUNT, ULD_DIS = ULD_loop , LLD_DIS = LLD_loop; 
    Display = 1;
    if(mode == 1 && ULD_INT <= 1000 - STEP_INT){FLAG1 = true;}
    else{start_status = 0, FINISH = 1;}
    }
  FLAG2 = false;
  }
  }
  }
}
 
void loop_T1(void * parameter) {
  for (;;) {
  switch_pressed(32, 33, 5, 25);
  loading_screen();
  if(Display == 1){
    Display = 0;
    switch(mode) {
    case 1: //Sweep mode
      Serial.print(LLD_DIS); Serial.print(",");Serial.print(ULD_DIS); Serial.print(","); Serial.println(NETCOUNT);
      tft.setCursor(141, 139); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(NETCOUNT_LAST);
      tft.setCursor(141, 139); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("----");
      tft.setCursor(141, 139); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(NETCOUNT);
      NETCOUNT_LAST = NETCOUNT;

      //Formatting Sweep data to Firebase
      Sweep_Result_ID = "fields/ID" + String(numSweep) + "/stringValue";
      Sweep_Result = String(LLD_DIS)+","+String(NETCOUNT);
      contentResultSweep.set(Sweep_Result_ID,Sweep_Result);
      contentResultSweep.set("fields/Num/stringValue",String(numSweep));
      if (Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathSweepwithID.c_str(), contentResultSweep.raw(), "ID"+String(numSweep))
      && Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathSweepwithID.c_str(), contentResultSweep.raw(), "Num")) {
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
    } else {
      Serial.println(fbdo.errorReason());
    }
      numSweep++;
      break;
    case 2: //Scanning Mode
      Serial.print(LLD_DIS); Serial.print(",");Serial.print(ULD_DIS); Serial.print(","); Serial.println(NETCOUNT);
      Serial.println(documentPathScanwithID);
      //Formatting Scanning data to Firebase
      String Scan_Result_ID = "fields/ID" + String(numScan) + "/stringValue";
      Serial.println(Scan_Result_ID);
      String Scan_Result = String(POSITION)+","+String(NETCOUNT);
      Serial.println(Scan_Result);
      FirebaseJson contentResultScan;
      contentResultScan.set(Scan_Result_ID,Scan_Result);
      contentResultScan.set("fields/Num/stringValue",String(numScan));
      if (Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathScanwithID.c_str(), contentResultScan.raw(), "ID"+String(numScan))
      && Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathScanwithID.c_str(), contentResultScan.raw(), "Num")) {
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
    } else {
      Serial.println(fbdo.errorReason());
    }
      numScan++;
      break;
    } 
  } 
  if (change == true){ 
  change = false;
  switch(page){
   case 1: //page 1
     switch (button){
      case 1: cursor_page1--; break;
      case 2: cursor_page1++; break;
      case 3: page--; break;
      case 4: page++; break;
     }
     check_variable();
     switch(cursor_page1){
      case 1: // sweep mode
      tft.setCursor(100, 140); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("SWEEP MODE");
      tft.fillTriangle(35,138,    35,158,    50,148, TFT_CYAN);
      tft.setCursor(100, 184); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("SCANNING MODE");
      tft.fillTriangle(35,182,    35,202,    50,192, TFT_BLACK);
      break;

      case 2: // sanninng mode
      tft.setCursor(100, 140); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("SWEEP MODE");
      tft.fillTriangle(35,138,    35,158,    50,148, TFT_BLACK);
      tft.setCursor(100, 184); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("SCANNING MODE");
      tft.fillTriangle(35,182,    35,202,    50,192, TFT_CYAN);
      break;
     }
     if (page == 2){mode = cursor_page1; fill_background();}
   break;


   case 2: //page 2
   switch (button){
      case 1: if(cursor_enter == 0){cursor_page2--;} break;
      case 2: if(cursor_enter == 0){cursor_page2++;} break;
      case 3: cursor_enter--; break;
      case 4: cursor_enter++; break;
     }
    check_variable();
    tft.setCursor(4, 0); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("<EXIT      EXIT?       NO>");
    if (cursor_enter < 0){
      switch (cursor_enter){
        case -1: tft.setCursor(4, 0); tft.setTextColor(TFT_RED); tft.setTextSize(2); tft.println("<EXIT      EXIT?       NO>"); break;
        case -2: page = 1; fill_background(); break; 
      }
    }
    switch(mode){
      case 1://mode 1 SWEEP MODE
        switch (cursor_page2){
          case 1: //WIN
            switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,66,    57,86,    72,76, TFT_CYAN);
              cursor_digit1(digit1_WIN); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_WIN);
              tft.setCursor(202, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_WIN);
              tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_WIN);
              break;

              case 1: //DIGIT1
              tft.fillTriangle(57,66,    57,86,    72,76, TFT_YELLOW);
              cursor_digit1(digit1_WIN); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit1_WIN);
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_WIN);
              digit1_WIN = change_3digits(digit1_WIN, cursor_enter);
              cursor_digit1(digit1_WIN); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit1_WIN);
              break; 
              
              case 2: //DIGIT2
              cursor_digit1(digit1_WIN); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_WIN);
              tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_WIN);
              tft.setCursor(214, 70); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit2_WIN);
              digit2_WIN = change_3digits(digit2_WIN, cursor_enter);
              tft.setCursor(214, 70); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit2_WIN);
              break;

              case 3: //DIGIT3
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_WIN);
              tft.setCursor(226, 70); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit3_WIN);
              digit3_WIN = change_3digits(digit3_WIN, cursor_enter);
              tft.setCursor(226, 70); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit3_WIN);
              break;
            }
            break;//end

          case 2: //STEP
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,89,    57,109,    72,99, TFT_CYAN);
              cursor_digit1(digit1_STEP); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_STEP);
              tft.setCursor(202, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_STEP);
              tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_STEP);
              break;

              case 1: //DIGIT1
              tft.fillTriangle(57,89,    57,109,    72,99, TFT_YELLOW);
              cursor_digit1(digit1_STEP); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit1_STEP);
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_STEP);
              digit1_STEP = change_3digits(digit1_STEP, cursor_enter);
              cursor_digit1(digit1_STEP); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit1_STEP);
              break;
              
              case 2: //DIGIT2
              cursor_digit1(digit1_STEP); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_STEP);
              tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_STEP);
              tft.setCursor(214, 93); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit2_STEP);
              digit2_STEP = change_3digits(digit2_STEP, cursor_enter);
              tft.setCursor(214, 93); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit2_STEP);
              break;

              case 3: //DIGIT3
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_STEP);
              tft.setCursor(226, 93); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit3_STEP);
              digit3_STEP = change_3digits(digit3_STEP, cursor_enter);
              tft.setCursor(226, 93); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit3_STEP);
              break;
            }
           break;

          case 3: //TIME
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,112,    57,132,    72,122, TFT_CYAN);
              tft.setCursor(118, 161); tft.setTextColor(TFT_RED); tft.setTextSize(2); tft.println("<START>");
              tft.setCursor(190, 116); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(SetTime_sweep);
              break;

              case 1:
              tft.fillTriangle(57,112,    57,132,    72,122, TFT_YELLOW);
              tft.setCursor(190, 116); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(SetTime_sweep);
              SetTime_sweep = change_1digit(SetTime_sweep);
              tft.setCursor(190, 116); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(SetTime_sweep);
              break;
              }
           break;

          case 4: //START
            switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.setCursor(141, 139); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(NETCOUNT);
              tft.setCursor(141, 139); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("----");
              tft.setCursor(106, 161); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("<RESTART>");
              tft.setCursor(118, 161); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println("<START>");
              tft.fillRoundRect(35, 188, 250, 30, 10, TFT_BLACK);
              start_status = 0;
              break;
              case 1:
              enter_reset();
              tft.setCursor(118, 161); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("<START>");
              tft.setCursor(106, 161); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println("<RESTART>");
              WIN = digit1_WIN + digit2_WIN/10.0 + digit3_WIN/100.0;
              STEP = digit1_STEP + digit2_STEP/10.0 + digit3_STEP/100.0;
              SetTime = SetTime_sweep, WIN_loop = WIN, STEP_loop = STEP;
              start_status = 1, FLAG4 = true, width = 0, loadingMillis = millis();
              tft.setCursor(76, 195); tft.setTextColor(TFT_MAGENTA); tft.setTextSize(2); tft.println("IN PROGRESS...");
               
               //Set ID for Sweep mode
              numSweep = 0;
              randomIDforSweep = generateRandomId();
              documentPathSweepwithID = documentPathSweep + randomIDforSweep;
              FirebaseJson contentSweep;
              contentSweep.set("fields/Name/stringValue","test");
              contentSweep.set("fields/Description/stringValue", "Sweep mode test");
              if (Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathSweepwithID.c_str(), contentSweep.raw(), "Name")
                && Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathSweepwithID.c_str(), contentSweep.raw(), "Description")) {
                  Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
                } else {
                  Serial.println(fbdo.errorReason());
                }
              break;
            }
            break;
        }
      break;
      
      case 2://mode 2 SCANNING MODE เขียนตาม mode 1
         switch (cursor_page2){
           case 1: //ULD
              switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,66,    57,86,    72,76, TFT_CYAN);
              cursor_digit1(digit1_ULD); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_ULD);
              tft.setCursor(202, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_ULD);
              tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_ULD);
              break;

              case 1: //DIGIT1
              tft.fillTriangle(57,66,    57,86,    72,76, TFT_YELLOW);
              cursor_digit1(digit1_ULD); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit1_ULD);
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_ULD);
              digit1_ULD = change_3digits(digit1_ULD, cursor_enter);
              cursor_digit1(digit1_ULD); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit1_ULD);
              break;
              
              case 2: //DIGIT2
              cursor_digit1(digit1_ULD); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_ULD);
              tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_ULD);
              tft.setCursor(214, 70); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit2_ULD);
              digit2_ULD = change_3digits(digit2_ULD, cursor_enter);
              tft.setCursor(214, 70); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit2_ULD);
              break;

              case 3: //DIGIT3
              tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_ULD);
              tft.setCursor(226, 70); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit3_ULD);
              digit3_ULD = change_3digits(digit3_ULD, cursor_enter);
              tft.setCursor(226, 70); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit3_ULD);
              break;
            }
           break;

           case 2: //LLD
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,89,    57,109,    72,99, TFT_CYAN);
              cursor_digit1(digit1_LLD); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_LLD);
              tft.setCursor(202, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_LLD);
              tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_LLD);
              break;

              case 1: //DIGIT1
              tft.fillTriangle(57,89,    57,109,    72,99, TFT_YELLOW);
              cursor_digit1(digit1_LLD); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit1_LLD);
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_LLD);
              digit1_LLD = change_3digits(digit1_LLD, cursor_enter);
              cursor_digit1(digit1_LLD); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit1_LLD);
              break;
              
              case 2: //DIGIT2
              cursor_digit1(digit1_LLD); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_LLD);
              tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_LLD);
              tft.setCursor(214, 93); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit2_LLD);
              digit2_LLD = change_3digits(digit2_LLD, cursor_enter);
              tft.setCursor(214, 93); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit2_LLD);
              break;

              case 3: //DIGIT3
              tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_LLD);
              tft.setCursor(226, 93); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(digit3_LLD);
              digit3_LLD = change_3digits(digit3_LLD, cursor_enter);
              tft.setCursor(226, 93); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(digit3_LLD);
              break;
            }
           break;

           case 3: //TIME
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,112,    57,132,    72,122, TFT_CYAN);
              tft.setCursor(190, 116); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(SetTime_scan);
              break;

              case 1:
              tft.fillTriangle(57,112,    57,132,    72,122, TFT_YELLOW);
              tft.setCursor(190, 116); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(SetTime_scan);
              SetTime_scan = change_1digit(SetTime_scan);
              tft.setCursor(190, 116); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(SetTime_scan);
              break;
              }
           break;

           case 4: //POSITION
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.fillTriangle(57,135,    57,155,    72,145, TFT_CYAN);
              tft.setCursor(118, 161); tft.setTextColor(TFT_RED); tft.setTextSize(2); tft.println("<START>");
              tft.setCursor(190, 139); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(POSITION);
              break;
              case 1:
              tft.fillTriangle(57,135,    57,155,    72,145, TFT_YELLOW);
              tft.setCursor(190, 139); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println(POSITION);
              POSITION = change_1digit(POSITION);
              tft.setCursor(190, 139); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println(POSITION);

              break;
              }
           break;

           case 5: //START
           switch (cursor_enter){
              case 0:
              tft.fillRect(57, 66, 16, 90, TFT_BLACK);//แถบปิด cursor
              tft.setCursor(106, 161); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("<RESTART>");
              tft.setCursor(118, 161); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println("<START>");
              tft.fillRoundRect(35, 188, 250, 30, 10, TFT_BLACK);
              start_status = 0;
              break;
              case 1:
              enter_reset();
              tft.setCursor(118, 161); tft.setTextColor(TFT_BLACK); tft.setTextSize(2); tft.println("<START>");
              tft.setCursor(106, 161); tft.setTextColor(TFT_YELLOW); tft.setTextSize(2); tft.println("<RESTART>");
              ULD = digit1_ULD + digit2_ULD/10.0 + digit3_ULD/100.0;
              LLD = digit1_LLD + digit2_LLD/10.0 + digit3_LLD/100.0;
              SetTime = SetTime_scan, ULD_loop = ULD, LLD_loop = LLD;
              start_status = 1, FLAG4 = true, width = 0, loadingMillis = millis();
              tft.setCursor(76, 195); tft.setTextColor(TFT_MAGENTA); tft.setTextSize(2); tft.println("IN PROGRESS...");
              break;
            }
           break;
         }
      break;
    }
   break;
  }
 }
}
}

int change_3digits (int digit, int digit_position){
  switch(button){
    case 1: digit++; break;
    case 2: digit--; break;
  }
  if(digit < 0){digit = 0;}
  switch(digit_position){
    case 1: if (digit > 10){digit = 10;} break;
    case 2: if (digit > 9){digit = 9;} break;
    case 3: if (digit > 9){digit = 9;} break;
  }
  return digit;
}

int change_1digit(int digit){
  switch(button){
    case 1: digit++; break;
    case 2: digit--; break;
  }
  if(digit < 0){digit = 0;}
  return digit;
} 

void cursor_digit1(int digit1){
  switch(cursor_page2){
  case 1: if (digit1 == 10){tft.setCursor(178, 70);} else{tft.setCursor(190, 70);} break;
  case 2: if (digit1_LLD == 10){tft.setCursor(178, 93);} else{tft.setCursor(190, 93);} break;
  }
}

void check_variable(){
 if (cursor_page1 < 1){cursor_page1 = 1;}
 else if (cursor_page1 > 2){cursor_page1 = 2;}
 else if (page < 1){page = 1;}
 else if (page > 2){page = 2;}
 else if (cursor_page2 < 1){cursor_page2 = 1;}
 //--------------------------------------------------------------------------//
 else if (cursor_page2 > 4 && mode == 1){cursor_page2 = 4;}
 else if (cursor_enter > 3 && cursor_page2 == 1 && mode == 1){cursor_enter = 0;}//WIN
 else if (cursor_enter > 3 && cursor_page2 == 2 && mode == 1){cursor_enter = 0;}//STEP
 else if (cursor_enter > 1 && cursor_page2 == 3 && mode == 1){cursor_enter = 0;}//Settime_sweep
 else if (cursor_enter > 1 && cursor_page2 == 4 && mode == 1){cursor_enter = 0;}//enter_sweep
//---------------------------------------------------------------------------//
 else if (cursor_page2 > 5 && mode == 2){cursor_page2 = 5;}
 else if (cursor_enter > 3 && cursor_page2 == 1 && mode == 2){cursor_enter = 0;}//ULD
 else if (cursor_enter > 3 && cursor_page2 == 2 && mode == 2){cursor_enter = 0;}//LLD
 else if (cursor_enter > 1 && cursor_page2 == 3 && mode == 2){cursor_enter = 0;}//Settime_scan
 else if (cursor_enter > 1 && cursor_page2 == 4 && mode == 2){cursor_enter = 0;}//POSITION
 else if (cursor_enter > 1 && cursor_page2 == 5 && mode == 2){cursor_enter = 0;}//enter_scan
}

void enter_reset(){
  switch(button){
    case 1: button = 3; change = true; break;
    case 2: button = 3; change = true; break;
  }
}

void fill_background(){ 
  switch(page){
   case 1: //page 1
   drawJpeg("/background_TFT_(RESIZE).jpg", 0 , 0);
   tft.drawRoundRect(57, 129, 206, 37, 10, TFT_MAGENTA);
   tft.setCursor(100, 140); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("SWEEP MODE");
   tft.fillTriangle(35,138,    35,158,    50,148, TFT_CYAN);
   
   tft.drawRoundRect(57, 173, 206, 37, 10, TFT_MAGENTA);
   tft.setCursor(100, 184); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("SCANNING MODE");
   tft.fillTriangle(35,182,    35,202,    50,192, TFT_BLACK);
   cursor_page1 = 1; 
   break;

   case 2: //page 2
   switch(mode){
    case 1: //mode 1
    drawJpeg("/background_TFT_SWEEP(RESIZE).jpg", 0 , 0);
    tft.drawRoundRect(57, 22, 206, 37, 10, TFT_MAGENTA);
    tft.setCursor(110, 34); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("SWEEP MODE");

    tft.setCursor(78, 70); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("WIN (V):");
    if (digit1_WIN == 10){tft.setCursor(178, 70);}
    else{tft.setCursor(190, 70);} 
    tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_WIN);
    tft.setCursor(202, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
    tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_WIN);
    tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_WIN);
    tft.fillTriangle(57,66,    57,86,    72,76, TFT_CYAN);

    tft.setCursor(78, 93); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("STEP (V):");
    if (digit1_STEP == 10){tft.setCursor(178, 93);}
    else{tft.setCursor(190, 93);} 
    tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_STEP);
    tft.setCursor(202, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
    tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_STEP);
    tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_STEP);
    
    tft.setCursor(78, 116); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("TIME (S):");
    tft.setCursor(190, 116); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(SetTime_sweep);

    tft.setCursor(78, 139); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("CNT:");
    tft.setCursor(141, 139); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("----");
    
    tft.setCursor(118, 161); tft.setTextColor(TFT_RED); tft.setTextSize(2); tft.println("<START>");
    
    tft.drawRoundRect(32, 185, 256, 36, 10, TFT_MAGENTA); //Loading tab
    cursor_page2 = 1; cursor_enter = 0;
    break;

    case 2: //mode 2
    drawJpeg("/background_TFT_SCAN(RESIZE).jpg", 0 , 0);
    tft.drawRoundRect(57, 22, 206, 37, 10, TFT_MAGENTA);
    tft.setCursor(100, 34); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println("SCANNING MODE");

    tft.setCursor(78, 70); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("ULD (V):");
    if (digit1_ULD == 10){tft.setCursor(178, 70);}
    else{tft.setCursor(190, 70);} 
    tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_ULD);
    tft.setCursor(202, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
    tft.setCursor(214, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_ULD);
    tft.setCursor(226, 70); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_ULD);
    tft.fillTriangle(57,66,    57,86,    72,76, TFT_CYAN);

    tft.setCursor(78, 93); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("LLD (V):");
   if (digit1_LLD == 10){tft.setCursor(178, 93);}
    else{tft.setCursor(190, 93);} 
    tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit1_LLD);
    tft.setCursor(202, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(".");
    tft.setCursor(214, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit2_LLD);
    tft.setCursor(226, 93); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(digit3_LLD);
  
    tft.setCursor(78, 116); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("TIME (S):");
    tft.setCursor(190, 116); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(SetTime_scan);
    
    tft.setCursor(78, 139); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("POSITION:");
    tft.setCursor(190, 139); tft.setTextColor(TFT_CYAN); tft.setTextSize(2); tft.println(POSITION);
      
    tft.setCursor(118, 161); tft.setTextColor(TFT_RED); tft.setTextSize(2); tft.println("<START>");
    
    tft.drawRoundRect(32, 185, 256, 36, 10, TFT_MAGENTA); //Loading tab
    cursor_page2 = 1; cursor_enter = 0;
    break;
   }
   break;
  }
}

void loading_screen(){
  unsigned long currentMillis = millis();
  if (start_status == 1 && width < 225){
    int update_time;
    switch(mode){
      case 1: update_time = ((10 - WIN)/STEP)*(SetTime_sweep + Delay_time)*100; break;
      case 2: update_time = (SetTime_scan + Delay_time)*100; break;
    }
  if (currentMillis >= loadingMillis + update_time){
    width += 25;
    loadingMillis = currentMillis;
    tft.fillRoundRect(35, 188, width, 30, 10, TFT_YELLOW); //total width = 250
    tft.setCursor(76, 195); tft.setTextColor(TFT_MAGENTA); tft.setTextSize(2); tft.println("IN PROGRESS...");
  }
  }  
  if(FINISH == 1){
  tft.fillRoundRect(35, 188, 250, 30, 10, TFT_YELLOW); 
  tft.setCursor(124, 195); tft.setTextColor(TFT_MAGENTA); tft.setTextSize(2); tft.println("FINISH");
  FINISH = 0;
  }
}

void switch_pressed(int upPin, int downPin, int enterPin, int backPin){
  unsigned long currentMillis = millis();
  if (currentMillis - lastButtonPressTime < debounceDelay) {
    // Ignore button presses within the debounce delay
    return;
  }
 if (digitalRead(upPin) == LOW){
    change = true, button = 1;
    Serial.println("Up switch pressed");
  }
  else if (digitalRead(downPin) == LOW){
    change = true, button = 2;
    Serial.println("Down switch pressed");
  }
  else if (digitalRead(enterPin) == LOW){
    change = true, button = 4;
    Serial.println("Enter switch pressed");
  }
  else if (digitalRead(backPin) == LOW){
    change = true, button = 3;
    Serial.println("Back switch pressed");
  }
  lastButtonPressTime = currentMillis;
}

String generateRandomId() {
  const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  const int charsetSize = sizeof(charset) - 1;
  
  String randomId = "";
  for (int i = 0; i < 20; ++i) {
    char randomChar = charset[random(0, charsetSize)];
    randomId += randomChar;
  }
  
  return randomId;
}



//====================================================================================
//                                 Jpeg decoder
//====================================================================================

#define minimum(a,b)     (((a) < (b)) ? (a) : (b))
void drawJpeg(const char *filename, int xpos, int ypos) {
  Serial.println("===========================");
  Serial.print("Drawing file: "); Serial.println(filename);
  Serial.println("===========================");
  fs::File jpegFile = SPIFFS.open( filename, "r");    
  if ( !jpegFile ) {
    Serial.print("ERROR: File \""); Serial.print(filename); Serial.println ("\" not found!");
    return;
  }
  boolean decoded = JpegDec.decodeFsFile(filename);  
  if (decoded) {
    jpegInfo();
    jpegRender(xpos, ypos);
  }
  else {
    Serial.println("Jpeg file format not supported!");
  }
}
void jpegRender(int xpos, int ypos) {
  uint16_t  *pImg;
  int16_t mcu_w = JpegDec.MCUWidth;
  int16_t mcu_h = JpegDec.MCUHeight;
  int32_t max_x = JpegDec.width;
  int32_t max_y = JpegDec.height;
  int32_t min_w = minimum(mcu_w, max_x % mcu_w);
  int32_t min_h = minimum(mcu_h, max_y % mcu_h);
  int32_t win_w = mcu_w;
  int32_t win_h = mcu_h;
  uint32_t drawTime = millis();
  max_x += xpos;
  max_y += ypos;
  while ( JpegDec.readSwappedBytes()) { 
    pImg = JpegDec.pImage;
    int mcu_x = JpegDec.MCUx * mcu_w + xpos;  
    int mcu_y = JpegDec.MCUy * mcu_h + ypos;
    if (mcu_x + mcu_w <= max_x) win_w = mcu_w;
    else win_w = min_w;
    if (mcu_y + mcu_h <= max_y) win_h = mcu_h;
    else win_h = min_h;
    if (win_w != mcu_w)
    {
      for (int h = 1; h < win_h-1; h++)
      {
        memcpy(pImg + h * win_w, pImg + (h + 1) * mcu_w, win_w << 1);
      }
    }
    if ( mcu_x < tft.width() && mcu_y < tft.height())
    {
      tft.pushImage(mcu_x, mcu_y, win_w, win_h, pImg);
    }
    else if ( ( mcu_y + win_h) >= tft.height()) JpegDec.abort();
  }
  drawTime = millis() - drawTime; 
  Serial.print  ("Total render time was    : "); Serial.print(drawTime); Serial.println(" ms");
  Serial.println("=====================================");
}
void jpegInfo() {
  Serial.println("===============");
  Serial.println("JPEG image info");
  Serial.println("===============");
  Serial.print  ("Width      :"); Serial.println(JpegDec.width);
  Serial.print  ("Height     :"); Serial.println(JpegDec.height);
  Serial.print  ("Components :"); Serial.println(JpegDec.comps);
  Serial.print  ("MCU / row  :"); Serial.println(JpegDec.MCUSPerRow);
  Serial.print  ("MCU / col  :"); Serial.println(JpegDec.MCUSPerCol);
  Serial.print  ("Scan type  :"); Serial.println(JpegDec.scanType);
  Serial.print  ("MCU width  :"); Serial.println(JpegDec.MCUWidth);
  Serial.print  ("MCU height :"); Serial.println(JpegDec.MCUHeight);
  Serial.println("===============");
  Serial.println("");
}
void createArray(const char *filename) {
  fs::File jpgFile = SPIFFS.open( filename, "r");    
  if ( !jpgFile ) {
    Serial.print("ERROR: File \""); Serial.print(filename); Serial.println ("\" not found!");
    return;
  }
  uint8_t data;
  byte line_len = 0;
  Serial.println("");
  Serial.println("// Generated by a JPEGDecoder library example sketch:");
  Serial.println("// https://github.com/Bodmer/JPEGDecoder");
  Serial.println("");
  Serial.println("#if defined(__AVR__)");
  Serial.println("  #include <avr/pgmspace.h>");
  Serial.println("#endif");
  Serial.println("");
  Serial.print  ("const uint8_t ");
  while (*filename != '.') Serial.print(*filename++);
  Serial.println("[] PROGMEM = {"); 
  while ( jpgFile.available()) {
    data = jpgFile.read();
    Serial.print("0x"); if (abs(data) < 16) Serial.print("0");
    Serial.print(data, HEX); Serial.print(",");
    line_len++;
    if ( line_len >= 32) {
      line_len = 0;
      Serial.println();
    }
  }
  Serial.println("};\r\n");
  jpgFile.close();
}
//====================================================================================

void setup() {
  Serial.begin(9600);
  Serial.println("Setup started.");
  dacLLD.begin(); dacULD.begin();
  rtc.begin();
  rtc.writeSqwPinMode(DS3231_SquareWave1Hz);
  pinMode(32, INPUT_PULLUP); pinMode(33, INPUT_PULLUP); pinMode(25, INPUT_PULLUP); pinMode(5, INPUT_PULLUP);
  pinMode(SQWinput, INPUT);
  digitalWrite (SQWinput, HIGH);
  pinMode(LOGICinput, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(SQWinput), TimeInterrupt, FALLING);
  attachInterrupt(digitalPinToInterrupt(LOGICinput), LogicInterrupt, RISING);
  xTaskCreatePinnedToCore(loop_T0, "Task0", 20000, NULL, 0, NULL, 1); 
  xTaskCreatePinnedToCore(loop_T1, "Task1", 20000, NULL, 0, NULL, 0);
  tft.begin();
  tft.setRotation(1);
  tft.setTextWrap(false);
  if(!SPIFFS.begin(true)){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
  //Low Batt screen
  drawJpeg("/Low_Battery.jpg", 0 , 0);
  tft.setCursor(70, 95); tft.setTextColor(TFT_RED); tft.setTextSize(3); tft.println("LOW BATTERY");
  tft.setCursor(53, 145); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("  Your battery is  ");
  tft.setCursor(53, 165); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("getting low. Please");
  tft.setCursor(53, 185); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("charge this device.");
  //check Batt
  while(voltage <= 12){
      voltage = (float)analogRead(36) / 4096 * 16; //test the precision
      Serial.print("batt Low: ");
      Serial.println(voltage);
      delay(500);
   }
   //check wifi connection
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); 
  Serial.print("Connecting to Wi-Fi");
  //Disconnect screen
  drawJpeg("/WIFIDIS.jpg", 0 , 0);
    tft.setCursor(54, 90); tft.setTextColor(TFT_YELLOW); tft.setTextSize(3); tft.println("DISCONNECTED");
    tft.setCursor(44, 145); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println(" Please check your ");
    tft.setCursor(44, 165); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("internet connection");
    tft.setCursor(72, 185); tft.setTextColor(TFT_WHITE); tft.setTextSize(2); tft.println("and try again.");
  while (WiFi.status() != WL_CONNECTED){
    Serial.println('.');
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);
  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  //send template data to firebase
  randomIDforScan = generateRandomId();
  documentPathScanwithID = documentPathScan + randomIDforScan;
  Serial.println(documentPathScanwithID);
  FirebaseJson contentScan;
  contentScan.set("fields/Name/stringValue","test");
  contentScan.set("fields/Description/stringValue", "Scanning mode test");

  if (Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathScanwithID.c_str(), contentScan.raw(), "Name")
    && Firebase.Firestore.patchDocument(&fbdo, FIREBASE_PROJECT_ID, "", documentPathScanwithID.c_str(), contentScan.raw(), "Description")) {
      Serial.printf("ok\n%s\n\n", fbdo.payload().c_str());
    } else {
      Serial.println(fbdo.errorReason());
    }         
  
  Serial.println("\r\nInitialisation done.");
  fill_background();
}
void loop(){
  delay(1);
}